

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Mar 06 18:11:25 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23  0000                     
    24                           ; Version 1.42
    25                           ; Generated 13/04/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	smallconst
    60  0000'                    __psmallconst:
    61                           	opt stack 0
    62  0000' 00                 	db	0
    63  0001'                    _vfnapStateMachineFuncPtr:
    64                           	opt stack 0
    65  0001' 00'                	db	low _vfnState0
    66  0002' 00'                	db	high _vfnState0
    67  0003' 00'                	db	low _vfnState1
    68  0004' 00'                	db	high _vfnState1
    69  0005'                    __end_of_vfnapStateMachineFuncPtr:
    70                           	opt stack 0
    71  0000                     _TMR0	set	4054
    72  0000                     _ADCON0bits	set	4034
    73  0000                     _INTCONbits	set	4082
    74  0000                     _T0CON	set	4053
    75  0000                     _RCREG	set	4014
    76  0000                     _PIR1bits	set	3998
    77  0000                     _TXREG	set	4013
    78  0000                     _TXSTAbits	set	4012
    79  0000                     _TRISCbits	set	3988
    80  0000                     _BAUDCON	set	4024
    81  0000                     _SPBRG	set	4015
    82  0000                     _SPBRGH	set	4016
    83  0000                     _RCSTA	set	4011
    84  0000                     _TXSTA	set	4012
    85  0005'                    STR_1:
    86  0005' 43                 	db	67	;'C'
    87  0006' 61                 	db	97	;'a'
    88  0007' 6C                 	db	108	;'l'
    89  0008' 63                 	db	99	;'c'
    90  0009' 75                 	db	117	;'u'
    91  000A' 6C                 	db	108	;'l'
    92  000B' 61                 	db	97	;'a'
    93  000C' 64                 	db	100	;'d'
    94  000D' 6F                 	db	111	;'o'
    95  000E' 72                 	db	114	;'r'
    96  000F' 61                 	db	97	;'a'
    97  0010' 20                 	db	32
    98  0011' 0A                 	db	10
    99  0012' 0D                 	db	13
   100  0013' 00                 	db	0
   101  0000                     
   102                           ; #config settings
   103  0014' 00                 	db	0	; dummy byte at the end
   104  0000                     
   105                           	psect	cinit
   106  0000'                    __pcinit:
   107                           	opt stack 0
   108  0000'                    start_initialization:
   109                           	opt stack 0
   110  0000'                    __initialization:
   111                           	opt stack 0
   112                           
   113                           ; Clear objects allocated to COMRAM (12 bytes)
   114  0000' EE00' F000'        	lfsr	0,__pbssCOMRAM
   115  0004' 0E0C               	movlw	12
   116  0006'                    clear_0:
   117  0006' 6AEE               	clrf	postinc0,c
   118  0008' 06E8               	decf	wreg,f,c
   119  000A' E1FD               	bnz	clear_0
   120  000C'                    end_of_initialization:
   121                           	opt stack 0
   122  000C'                    __end_of__initialization:
   123                           	opt stack 0
   124  000C' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   125  000E' 6EF8               	movwf	tblptru,c
   126  0010' 0100               	movlb	0
   127  0012' EF00' F000'        	goto	_main	;jump to C main() function
   128                           tblptru	equ	0xFF8
   129                           postinc0	equ	0xFEE
   130                           wreg	equ	0xFE8
   131                           
   132                           	psect	bssCOMRAM
   133  0000'                    __pbssCOMRAM:
   134                           	opt stack 0
   135  0000'                    _num:
   136                           	opt stack 0
   137  0000'                    	ds	3
   138  0003'                    _result_bcd:
   139                           	opt stack 0
   140  0003'                    	ds	2
   141  0005'                    _gbState:
   142                           	opt stack 0
   143  0005'                    	ds	1
   144  0006'                    _byte1:
   145                           	opt stack 0
   146  0006'                    	ds	1
   147  0007'                    _dato2:
   148                           	opt stack 0
   149  0007'                    	ds	1
   150  0008'                    _dato1:
   151                           	opt stack 0
   152  0008'                    	ds	1
   153  0009'                    _dig2:
   154                           	opt stack 0
   155  0009'                    	ds	1
   156  000A'                    _dig1:
   157                           	opt stack 0
   158  000A'                    	ds	1
   159  000B'                    _result:
   160                           	opt stack 0
   161  000B'                    	ds	1
   162                           tblptru	equ	0xFF8
   163                           postinc0	equ	0xFEE
   164                           wreg	equ	0xFE8
   165                           
   166                           	psect	cstackCOMRAM
   167  0000'                    __pcstackCOMRAM:
   168                           	opt stack 0
   169  0000'                    ??_bcd2hex:
   170  0000'                    ?_ASCII_UART:
   171                           	opt stack 0
   172  0000'                    ?___awmod:
   173                           	opt stack 0
   174  0000'                    putc_UART@dato_TX:
   175                           	opt stack 0
   176  0000'                    ___awmod@dividend:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x0
   180  0000'                    	ds	1
   181  0001'                    bcd2hex@y:
   182                           	opt stack 0
   183  0001'                    printf_UART@dato:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x1
   187  0001'                    	ds	1
   188  0002'                    ___awmod@divisor:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x2
   192  0002'                    	ds	1
   193  0003'                    ??_printf_UART:
   194                           
   195                           ; 1 bytes @ 0x3
   196  0003'                    	ds	1
   197  0004'                    ___awmod@counter:
   198                           	opt stack 0
   199                           
   200                           ; 1 bytes @ 0x4
   201  0004'                    	ds	1
   202  0005'                    printf_UART@i:
   203                           	opt stack 0
   204  0005'                    ___awmod@sign:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x5
   208  0005'                    	ds	1
   209  0006'                    ?___awdiv:
   210                           	opt stack 0
   211  0006'                    vfnState0@i:
   212                           	opt stack 0
   213  0006'                    ___awdiv@dividend:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x6
   217  0006'                    	ds	2
   218  0008'                    ___awdiv@divisor:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x8
   222  0008'                    	ds	2
   223  000A'                    ___awdiv@counter:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0xA
   227  000A'                    	ds	1
   228  000B'                    ___awdiv@sign:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0xB
   232  000B'                    	ds	1
   233  000C'                    ___awdiv@quotient:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0xC
   237  000C'                    	ds	2
   238  000E'                    ?_hex2bcd:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0xE
   242  000E'                    	ds	2
   243  0010'                    _hex2bcd$916:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x10
   247  0010'                    	ds	2
   248  0012'                    hex2bcd@x:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x12
   252  0012'                    	ds	1
   253  0013'                    hex2bcd@y:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x13
   257  0013'                    	ds	2
   258  0015'                    vfnState1@result2:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x15
   262  0015'                    	ds	1
   263  0016'                    vfnState1@result1:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x16
   267  0016'                    	ds	1
   268  0017'                    tblptru	equ	0xFF8
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           ; 1 bytes @ 0x17
   273 ;;
   274 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   275 ;;
   276 ;; *************** function _main *****************
   277 ;; Defined at:
   278 ;;		line 39 in file "Main.c"
   279 ;; Parameters:    Size  Location     Type
   280 ;;		None
   281 ;; Auto vars:     Size  Location     Type
   282 ;;		None
   283 ;; Return value:  Size  Location     Type
   284 ;;                  1    wreg      void 
   285 ;; Registers used:
   286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : 0/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   292 ;;      Params:         0       0       0       0       0       0       0       0       0
   293 ;;      Locals:         0       0       0       0       0       0       0       0       0
   294 ;;      Temps:          0       0       0       0       0       0       0       0       0
   295 ;;      Totals:         0       0       0       0       0       0       0       0       0
   296 ;;Total ram usage:        0 bytes
   297 ;; Hardware stack levels required when called:    3
   298 ;; This function calls:
   299 ;;		_config
   300 ;;		_vfnState0
   301 ;;		_vfnState1
   302 ;; This function is called by:
   303 ;;		Startup code after reset
   304 ;; This function uses a non-reentrant model
   305 ;;
   306                           
   307                           	psect	text0
   308  0000'                    __ptext0:
   309                           	opt stack 0
   310  0000'                    _main:
   311                           	opt stack 28
   312                           
   313                           ;Main.c: 41: config();
   314                           
   315                           ;incstack = 0
   316  0000' EC00' F000'        	call	_config	;wreg free
   317                           
   318                           ;Main.c: 42: gbState = STATE0;
   319  0004' 0E00               	movlw	0
   320  0006' 6E05'              	movwf	_gbState,c
   321  0008'                    l1192:
   322                           
   323                           ;Main.c: 45: vfnapStateMachineFuncPtr[gbState]();
   324  0008' 5005'              	movf	_gbState,w,c
   325  000A' 0D02               	mullw	2
   326  000C' 0E00'              	movlw	low _vfnapStateMachineFuncPtr
   327  000E' 24F3               	addwf	prodl,w,c
   328  0010' 6EF6               	movwf	tblptrl,c
   329  0012' 0E00'              	movlw	high _vfnapStateMachineFuncPtr
   330  0014' 20F4               	addwfc	prodh,w,c
   331  0016' 6EF7               	movwf	tblptrh,c
   332  0018'                    	if	0	;There are less than 3 active tblptr bytes
   333  0018'                    	endif
   334  0018' D801               	call	u558
   335  001A' D7F6               	goto	l1192
   336  001C'                    u558:
   337  001C' 0005               	push	
   338  001E' 6EFA               	movwf	pclath,c
   339  0020' 0009               	tblrd		*+
   340  0022' 50F5               	movf	tablat,w,c
   341  0024' 6EFD               	movwf	tosl,c
   342  0026' 0009               	tblrd		*+
   343  0028' 50F5               	movf	tablat,w,c
   344  002A' 6EFE               	movwf	tosh,c
   345  002C' 50F8               	movf	tblptru,w,c
   346  002E' 6EFF               	movwf	tosu,c
   347  0030' 50FA               	movf	pclath,w,c
   348  0032' 0012               	return		;indir
   349  0034'                    __end_of_main:
   350                           	opt stack 0
   351                           tosu	equ	0xFFF
   352                           tosh	equ	0xFFE
   353                           tosl	equ	0xFFD
   354                           pclath	equ	0xFFA
   355                           tblptru	equ	0xFF8
   356                           tblptrh	equ	0xFF7
   357                           tblptrl	equ	0xFF6
   358                           tablat	equ	0xFF5
   359                           prodh	equ	0xFF4
   360                           prodl	equ	0xFF3
   361                           postinc0	equ	0xFEE
   362                           wreg	equ	0xFE8
   363                           
   364 ;; *************** function _vfnState0 *****************
   365 ;; Defined at:
   366 ;;		line 50 in file "Main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;  i               1    6[COMRAM] unsigned char 
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   375 ;; Tracked objects:
   376 ;;		On entry : 0/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   380 ;;      Params:         0       0       0       0       0       0       0       0       0
   381 ;;      Locals:         1       0       0       0       0       0       0       0       0
   382 ;;      Temps:          0       0       0       0       0       0       0       0       0
   383 ;;      Totals:         1       0       0       0       0       0       0       0       0
   384 ;;Total ram usage:        1 bytes
   385 ;; Hardware stack levels used:    1
   386 ;; Hardware stack levels required when called:    2
   387 ;; This function calls:
   388 ;;		_bcd2hex
   389 ;;		_printf_UART
   390 ;;		_putc_UART
   391 ;;		_scanf_UART
   392 ;; This function is called by:
   393 ;;		_main
   394 ;; This function uses a non-reentrant model
   395 ;;
   396                           
   397                           	psect	text1
   398  0000'                    __ptext1:
   399                           	opt stack 0
   400  0000'                    _vfnState0:
   401                           	opt stack 28
   402                           
   403                           ;Main.c: 51: printf_UART ("Calculadora \n\r");
   404                           
   405                           ;incstack = 0
   406  0000' 0E00'              	movlw	low STR_1
   407  0002' 6E01'              	movwf	printf_UART@dato,c
   408  0004' 0E00'              	movlw	high STR_1
   409  0006' 6E02'              	movwf	printf_UART@dato+1,c
   410  0008' EC00' F000'        	call	_printf_UART	;wreg free
   411                           
   412                           ;Main.c: 53: for(unsigned char i=0;i<5;i++){
   413  000C' 0E00               	movlw	0
   414  000E' 6E06'              	movwf	vfnState0@i,c
   415  0010'                    l1086:
   416  0010' 0E04               	movlw	4
   417  0012' 6406'              	cpfsgt	vfnState0@i,c
   418  0014' D001               	goto	l1090
   419  0016' D023               	goto	l1100
   420  0018'                    l1090:
   421                           
   422                           ;Main.c: 54: num[i] = scanf_UART();
   423  0018' 5006'              	movf	vfnState0@i,w,c
   424  001A' 0D01               	mullw	1
   425  001C' 0E00'              	movlw	low _num
   426  001E' 24F3               	addwf	prodl,w,c
   427  0020' 6ED9               	movwf	fsr2l,c
   428  0022' 0E00'              	movlw	high _num
   429  0024' 20F4               	addwfc	prodh,w,c
   430  0026' 6EDA               	movwf	fsr2h,c
   431  0028' EC00' F000'        	call	_scanf_UART	;wreg free
   432  002C' 6EDF               	movwf	indf2,c
   433                           
   434                           ;Main.c: 55: if (num[i] != 0 ){
   435  002E' 5006'              	movf	vfnState0@i,w,c
   436  0030' 0D01               	mullw	1
   437  0032' 0E00'              	movlw	low _num
   438  0034' 24F3               	addwf	prodl,w,c
   439  0036' 6ED9               	movwf	fsr2l,c
   440  0038' 0E00'              	movlw	high _num
   441  003A' 20F4               	addwfc	prodh,w,c
   442  003C' 6EDA               	movwf	fsr2h,c
   443  003E' 50DF               	movf	indf2,w,c
   444  0040' B4D8               	btfsc	status,2,c
   445  0042' D00B               	goto	l1096
   446                           
   447                           ;Main.c: 56: putc_UART(num[i]);
   448  0044' 5006'              	movf	vfnState0@i,w,c
   449  0046' 0D01               	mullw	1
   450  0048' 0E00'              	movlw	low _num
   451  004A' 24F3               	addwf	prodl,w,c
   452  004C' 6ED9               	movwf	fsr2l,c
   453  004E' 0E00'              	movlw	high _num
   454  0050' 20F4               	addwfc	prodh,w,c
   455  0052' 6EDA               	movwf	fsr2h,c
   456  0054' 50DF               	movf	indf2,w,c
   457  0056' EC00' F000'        	call	_putc_UART
   458  005A'                    l1096:
   459  005A' 2A06'              	incf	vfnState0@i,f,c
   460  005C' D7D9               	goto	l1086
   461  005E'                    l1100:
   462                           
   463                           ;Main.c: 57: }
   464                           ;Main.c: 58: }
   465                           ;Main.c: 61: dato1=(num[0] & 0x0F);
   466  005E' 5000'              	movf	_num,w,c
   467  0060' 0B0F               	andlw	15
   468  0062' 6E08'              	movwf	_dato1,c
   469                           
   470                           ;Main.c: 62: dato2=(num[1] & 0x0F);
   471  0064' 5001'              	movf	_num+1,w,c
   472  0066' 0B0F               	andlw	15
   473  0068' 6E07'              	movwf	_dato2,c
   474                           
   475                           ;Main.c: 63: byte1 = dato1<<4 | dato2;
   476  006A' 3808'              	swapf	_dato1,w,c
   477  006C' 0BF0               	andlw	240
   478  006E' 1007'              	iorwf	_dato2,w,c
   479  0070' 6E06'              	movwf	_byte1,c
   480                           
   481                           ;Main.c: 64: dig1 = bcd2hex(byte1);
   482  0072' 5006'              	movf	_byte1,w,c
   483  0074' EC00' F000'        	call	_bcd2hex
   484  0078' 6E0A'              	movwf	_dig1,c
   485                           
   486                           ;Main.c: 68: dato1 = (num[3] & 0x0F);
   487  007A' 5003'              	movf	_num+3,w,c
   488  007C' 0B0F               	andlw	15
   489  007E' 6E08'              	movwf	_dato1,c
   490                           
   491                           ;Main.c: 69: dato2 = (num[4] & 0x0F);
   492  0080' 5004'              	movf	_num+4,w,c
   493  0082' 0B0F               	andlw	15
   494  0084' 6E07'              	movwf	_dato2,c
   495                           
   496                           ;Main.c: 70: byte1 = dato1<<4 | dato2;
   497  0086' 3808'              	swapf	_dato1,w,c
   498  0088' 0BF0               	andlw	240
   499  008A' 1007'              	iorwf	_dato2,w,c
   500  008C' 6E06'              	movwf	_byte1,c
   501                           
   502                           ;Main.c: 71: dig2 = bcd2hex(byte1);
   503  008E' 5006'              	movf	_byte1,w,c
   504  0090' EC00' F000'        	call	_bcd2hex
   505  0094' 6E09'              	movwf	_dig2,c
   506                           
   507                           ;Main.c: 73: gbState = STATE1;
   508  0096' 0E01               	movlw	1
   509  0098' 6E05'              	movwf	_gbState,c
   510  009A' 0012               	return		;funcret
   511  009C'                    __end_of_vfnState0:
   512                           	opt stack 0
   513                           tosu	equ	0xFFF
   514                           tosh	equ	0xFFE
   515                           tosl	equ	0xFFD
   516                           pclath	equ	0xFFA
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           prodh	equ	0xFF4
   522                           prodl	equ	0xFF3
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           indf2	equ	0xFDF
   526                           fsr2h	equ	0xFDA
   527                           fsr2l	equ	0xFD9
   528                           status	equ	0xFD8
   529                           
   530 ;; *************** function _vfnState1 *****************
   531 ;; Defined at:
   532 ;;		line 79 in file "Main.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;		None
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  result1         1   22[COMRAM] unsigned char 
   537 ;;  result2         1   21[COMRAM] unsigned char 
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   547 ;;      Params:         0       0       0       0       0       0       0       0       0
   548 ;;      Locals:         2       0       0       0       0       0       0       0       0
   549 ;;      Temps:          0       0       0       0       0       0       0       0       0
   550 ;;      Totals:         2       0       0       0       0       0       0       0       0
   551 ;;Total ram usage:        2 bytes
   552 ;; Hardware stack levels used:    1
   553 ;; Hardware stack levels required when called:    2
   554 ;; This function calls:
   555 ;;		_ASCII_UART
   556 ;;		_hex2bcd
   557 ;;		_printf_UART
   558 ;;		_putc_UART
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text2
   565  0000'                    __ptext2:
   566                           	opt stack 0
   567  0000'                    _vfnState1:
   568                           	opt stack 28
   569                           
   570                           ;Main.c: 80: unsigned char result1;
   571                           ;Main.c: 81: unsigned char result2;
   572                           ;Main.c: 83: if (num[2] == '+'){
   573                           
   574                           ;incstack = 0
   575  0000' 0E2B               	movlw	43
   576  0002' 1802'              	xorwf	_num+2,w,c
   577  0004' A4D8               	btfss	status,2,c
   578  0006' D024               	goto	l1130
   579                           
   580                           ;Main.c: 84: result=(dig1) + (dig2);
   581  0008' 500A'              	movf	_dig1,w,c
   582  000A' 2409'              	addwf	_dig2,w,c
   583  000C' 6E0B'              	movwf	_result,c
   584                           
   585                           ;Main.c: 85: result_bcd = hex2bcd(result);
   586  000E' 500B'              	movf	_result,w,c
   587  0010' EC00' F000'        	call	_hex2bcd
   588  0014' C00E' F003'        	movff	?_hex2bcd,_result_bcd
   589  0018' C00F' F004'        	movff	?_hex2bcd+1,_result_bcd+1
   590                           
   591                           ;Main.c: 86: result1 = (result_bcd >> 8) & (0x00FF);
   592  001C' 5004'              	movf	_result_bcd+1,w,c
   593  001E' 6E16'              	movwf	vfnState1@result1,c
   594                           
   595                           ;Main.c: 87: result2 = (result_bcd) & (0x00FF);
   596  0020' C003' F015'        	movff	_result_bcd,vfnState1@result2
   597                           
   598                           ;Main.c: 88: putc_UART('=');
   599  0024' 0E3D               	movlw	61
   600  0026' EC00' F000'        	call	_putc_UART
   601                           
   602                           ;Main.c: 90: if (result1 != 0){
   603  002A' 5016'              	movf	vfnState1@result1,w,c
   604  002C' B4D8               	btfsc	status,2,c
   605  002E' D005               	goto	l124
   606                           
   607                           ;Main.c: 91: ASCII_UART(result1);
   608  0030' C016' F000'        	movff	vfnState1@result1,?_ASCII_UART
   609  0034' 6A01'              	clrf	?_ASCII_UART+1,c
   610  0036' EC00' F000'        	call	_ASCII_UART	;wreg free
   611  003A'                    l124:
   612                           
   613                           ;Main.c: 92: }
   614                           ;Main.c: 93: ASCII_UART(result2);
   615  003A' C015' F000'        	movff	vfnState1@result2,?_ASCII_UART
   616  003E' 6A01'              	clrf	?_ASCII_UART+1,c
   617  0040' EC00' F000'        	call	_ASCII_UART	;wreg free
   618                           
   619                           ;Main.c: 94: printf_UART("\n\r");
   620  0044' 0E00'              	movlw	low (STR_1+12)
   621  0046' 6E01'              	movwf	printf_UART@dato,c
   622  0048' 0E00'              	movlw	high (STR_1+12)
   623  004A' 6E02'              	movwf	printf_UART@dato+1,c
   624  004C' EC00' F000'        	call	_printf_UART	;wreg free
   625  0050'                    l1130:
   626                           
   627                           ;Main.c: 95: }
   628                           ;Main.c: 97: if (num[2] == '-'){
   629  0050' 0E2D               	movlw	45
   630  0052' 1802'              	xorwf	_num+2,w,c
   631  0054' A4D8               	btfss	status,2,c
   632  0056' D052               	goto	l1168
   633                           
   634                           ;Main.c: 98: if (dig1<dig2){
   635  0058' 5009'              	movf	_dig2,w,c
   636  005A' 5C0A'              	subwf	_dig1,w,c
   637  005C' B0D8               	btfsc	status,0,c
   638  005E' D029               	goto	l1152
   639                           
   640                           ;Main.c: 99: result = (dig2)-(dig1);
   641  0060' 500A'              	movf	_dig1,w,c
   642  0062' 0800               	sublw	0
   643  0064' 2409'              	addwf	_dig2,w,c
   644  0066' 6E0B'              	movwf	_result,c
   645                           
   646                           ;Main.c: 100: result_bcd = hex2bcd(result);
   647  0068' 500B'              	movf	_result,w,c
   648  006A' EC00' F000'        	call	_hex2bcd
   649  006E' C00E' F003'        	movff	?_hex2bcd,_result_bcd
   650  0072' C00F' F004'        	movff	?_hex2bcd+1,_result_bcd+1
   651                           
   652                           ;Main.c: 101: putc_UART('=');
   653  0076' 0E3D               	movlw	61
   654  0078' EC00' F000'        	call	_putc_UART
   655                           
   656                           ;Main.c: 102: result1 = (result_bcd >> 8) & (0x00FF);
   657  007C' 5004'              	movf	_result_bcd+1,w,c
   658  007E' 6E16'              	movwf	vfnState1@result1,c
   659                           
   660                           ;Main.c: 103: result2 = (result_bcd) & (0x00FF);
   661  0080' C003' F015'        	movff	_result_bcd,vfnState1@result2
   662                           
   663                           ;Main.c: 104: putc_UART('-');
   664  0084' 0E2D               	movlw	45
   665  0086' EC00' F000'        	call	_putc_UART
   666                           
   667                           ;Main.c: 106: if (result1 != 0){
   668  008A' 5016'              	movf	vfnState1@result1,w,c
   669  008C' B4D8               	btfsc	status,2,c
   670  008E' D005               	goto	l127
   671                           
   672                           ;Main.c: 107: ASCII_UART(result1);
   673  0090' C016' F000'        	movff	vfnState1@result1,?_ASCII_UART
   674  0094' 6A01'              	clrf	?_ASCII_UART+1,c
   675  0096' EC00' F000'        	call	_ASCII_UART	;wreg free
   676  009A'                    l127:
   677                           
   678                           ;Main.c: 108: }
   679                           ;Main.c: 109: ASCII_UART(result2);
   680  009A' C015' F000'        	movff	vfnState1@result2,?_ASCII_UART
   681  009E' 6A01'              	clrf	?_ASCII_UART+1,c
   682  00A0' EC00' F000'        	call	_ASCII_UART	;wreg free
   683                           
   684                           ;Main.c: 110: printf_UART("\n\r");
   685  00A4' 0E00'              	movlw	low (STR_1+12)
   686  00A6' 6E01'              	movwf	printf_UART@dato,c
   687  00A8' 0E00'              	movlw	high (STR_1+12)
   688  00AA' 6E02'              	movwf	printf_UART@dato+1,c
   689  00AC' EC00' F000'        	call	_printf_UART	;wreg free
   690                           
   691                           ;Main.c: 111: }
   692  00B0' D025               	goto	l1168
   693  00B2'                    l1152:
   694                           
   695                           ;Main.c: 112: else {
   696                           ;Main.c: 113: result = (dig1)-(dig2);
   697  00B2' 5009'              	movf	_dig2,w,c
   698  00B4' 0800               	sublw	0
   699  00B6' 240A'              	addwf	_dig1,w,c
   700  00B8' 6E0B'              	movwf	_result,c
   701                           
   702                           ;Main.c: 114: result_bcd = hex2bcd(result);
   703  00BA' 500B'              	movf	_result,w,c
   704  00BC' EC00' F000'        	call	_hex2bcd
   705  00C0' C00E' F003'        	movff	?_hex2bcd,_result_bcd
   706  00C4' C00F' F004'        	movff	?_hex2bcd+1,_result_bcd+1
   707                           
   708                           ;Main.c: 115: result1 = (result_bcd >> 8) & (0x00FF);
   709  00C8' 5004'              	movf	_result_bcd+1,w,c
   710  00CA' 6E16'              	movwf	vfnState1@result1,c
   711                           
   712                           ;Main.c: 116: result2 = (result_bcd) & (0x00FF);
   713  00CC' C003' F015'        	movff	_result_bcd,vfnState1@result2
   714                           
   715                           ;Main.c: 117: putc_UART('=');
   716  00D0' 0E3D               	movlw	61
   717  00D2' EC00' F000'        	call	_putc_UART
   718                           
   719                           ;Main.c: 119: if (result1 != 0){
   720  00D6' 5016'              	movf	vfnState1@result1,w,c
   721  00D8' B4D8               	btfsc	status,2,c
   722  00DA' D005               	goto	l129
   723                           
   724                           ;Main.c: 120: ASCII_UART(result1);
   725  00DC' C016' F000'        	movff	vfnState1@result1,?_ASCII_UART
   726  00E0' 6A01'              	clrf	?_ASCII_UART+1,c
   727  00E2' EC00' F000'        	call	_ASCII_UART	;wreg free
   728  00E6'                    l129:
   729                           
   730                           ;Main.c: 121: }
   731                           ;Main.c: 122: ASCII_UART(result2);
   732  00E6' C015' F000'        	movff	vfnState1@result2,?_ASCII_UART
   733  00EA' 6A01'              	clrf	?_ASCII_UART+1,c
   734  00EC' EC00' F000'        	call	_ASCII_UART	;wreg free
   735                           
   736                           ;Main.c: 123: printf_UART("\n\r");
   737  00F0' 0E00'              	movlw	low (STR_1+12)
   738  00F2' 6E01'              	movwf	printf_UART@dato,c
   739  00F4' 0E00'              	movlw	high (STR_1+12)
   740  00F6' 6E02'              	movwf	printf_UART@dato+1,c
   741  00F8' EC00' F000'        	call	_printf_UART	;wreg free
   742  00FC'                    l1168:
   743                           
   744                           ;Main.c: 124: }
   745                           ;Main.c: 125: }
   746                           ;Main.c: 126: if (num[2] == 'x'){
   747  00FC' 0E78               	movlw	120
   748  00FE' 1802'              	xorwf	_num+2,w,c
   749  0100' A4D8               	btfss	status,2,c
   750  0102' D025               	goto	l1186
   751                           
   752                           ;Main.c: 127: result = (dig1)*(dig2);
   753  0104' 500A'              	movf	_dig1,w,c
   754  0106' 0209'              	mulwf	_dig2,c
   755  0108' CFF3 F00B'         	movff	prodl,_result
   756                           
   757                           ;Main.c: 128: result_bcd = hex2bcd(result);
   758  010C' 500B'              	movf	_result,w,c
   759  010E' EC00' F000'        	call	_hex2bcd
   760  0112' C00E' F003'        	movff	?_hex2bcd,_result_bcd
   761  0116' C00F' F004'        	movff	?_hex2bcd+1,_result_bcd+1
   762                           
   763                           ;Main.c: 129: result1 = (result_bcd >> 8) & (0x00FF);
   764  011A' 5004'              	movf	_result_bcd+1,w,c
   765  011C' 6E16'              	movwf	vfnState1@result1,c
   766                           
   767                           ;Main.c: 130: result2 = (result_bcd) & (0x00FF);
   768  011E' C003' F015'        	movff	_result_bcd,vfnState1@result2
   769                           
   770                           ;Main.c: 131: putc_UART('=');
   771  0122' 0E3D               	movlw	61
   772  0124' EC00' F000'        	call	_putc_UART
   773                           
   774                           ;Main.c: 133: if (result1 != 0){
   775  0128' 5016'              	movf	vfnState1@result1,w,c
   776  012A' B4D8               	btfsc	status,2,c
   777  012C' D005               	goto	l131
   778                           
   779                           ;Main.c: 134: ASCII_UART(result1);
   780  012E' C016' F000'        	movff	vfnState1@result1,?_ASCII_UART
   781  0132' 6A01'              	clrf	?_ASCII_UART+1,c
   782  0134' EC00' F000'        	call	_ASCII_UART	;wreg free
   783  0138'                    l131:
   784                           
   785                           ;Main.c: 135: }
   786                           ;Main.c: 136: ASCII_UART(result2);
   787  0138' C015' F000'        	movff	vfnState1@result2,?_ASCII_UART
   788  013C' 6A01'              	clrf	?_ASCII_UART+1,c
   789  013E' EC00' F000'        	call	_ASCII_UART	;wreg free
   790                           
   791                           ;Main.c: 137: printf_UART("\n\r");
   792  0142' 0E00'              	movlw	low (STR_1+12)
   793  0144' 6E01'              	movwf	printf_UART@dato,c
   794  0146' 0E00'              	movlw	high (STR_1+12)
   795  0148' 6E02'              	movwf	printf_UART@dato+1,c
   796  014A' EC00' F000'        	call	_printf_UART	;wreg free
   797  014E'                    l1186:
   798                           
   799                           ;Main.c: 138: }
   800                           ;Main.c: 140: gbState=STATE0;
   801  014E' 0E00               	movlw	0
   802  0150' 6E05'              	movwf	_gbState,c
   803  0152' 0012               	return		;funcret
   804  0154'                    __end_of_vfnState1:
   805                           	opt stack 0
   806                           tosu	equ	0xFFF
   807                           tosh	equ	0xFFE
   808                           tosl	equ	0xFFD
   809                           pclath	equ	0xFFA
   810                           tblptru	equ	0xFF8
   811                           tblptrh	equ	0xFF7
   812                           tblptrl	equ	0xFF6
   813                           tablat	equ	0xFF5
   814                           prodh	equ	0xFF4
   815                           prodl	equ	0xFF3
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           indf2	equ	0xFDF
   819                           fsr2h	equ	0xFDA
   820                           fsr2l	equ	0xFD9
   821                           status	equ	0xFD8
   822                           
   823 ;; *************** function _hex2bcd *****************
   824 ;; Defined at:
   825 ;;		line 26 in file "comm.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  x               1    wreg     unsigned char 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  x               1   18[COMRAM] unsigned char 
   830 ;;  y               2   19[COMRAM] unsigned int 
   831 ;; Return value:  Size  Location     Type
   832 ;;                  2   14[COMRAM] unsigned int 
   833 ;; Registers used:
   834 ;;		wreg, status,2, status,0, cstack
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   840 ;;      Params:         2       0       0       0       0       0       0       0       0
   841 ;;      Locals:         5       0       0       0       0       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0       0       0       0       0
   843 ;;      Totals:         7       0       0       0       0       0       0       0       0
   844 ;;Total ram usage:        7 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; Hardware stack levels required when called:    1
   847 ;; This function calls:
   848 ;;		___awdiv
   849 ;;		___awmod
   850 ;; This function is called by:
   851 ;;		_vfnState1
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           	psect	text3
   856  0000'                    __ptext3:
   857                           	opt stack 0
   858  0000'                    _hex2bcd:
   859                           	opt stack 28
   860                           
   861                           ;incstack = 0
   862                           ;hex2bcd@x stored from wreg
   863  0000' 6E12'              	movwf	hex2bcd@x,c
   864                           
   865                           ;comm.c: 27: unsigned int y;
   866                           ;comm.c: 29: y = (x / 100) << 8;
   867  0002' C012' F006'        	movff	hex2bcd@x,___awdiv@dividend
   868  0006' 6A07'              	clrf	___awdiv@dividend+1,c
   869  0008' 0E00               	movlw	0
   870  000A' 6E09'              	movwf	___awdiv@divisor+1,c
   871  000C' 0E64               	movlw	100
   872  000E' 6E08'              	movwf	___awdiv@divisor,c
   873  0010' EC00' F000'        	call	___awdiv	;wreg free
   874  0014' C006' F007'        	movff	?___awdiv,?___awdiv+1
   875  0018' 6A06'              	clrf	?___awdiv,c
   876  001A' C006' F013'        	movff	?___awdiv,hex2bcd@y
   877  001E' C007' F014'        	movff	?___awdiv+1,hex2bcd@y+1
   878                           
   879                           ;comm.c: 30: y = ((x % 100)/10 << 4) | y;
   880  0022' 0E00               	movlw	0
   881  0024' 6E03'              	movwf	___awmod@divisor+1,c
   882  0026' 0E64               	movlw	100
   883  0028' 6E02'              	movwf	___awmod@divisor,c
   884  002A' C012' F000'        	movff	hex2bcd@x,___awmod@dividend
   885  002E' 6A01'              	clrf	___awmod@dividend+1,c
   886  0030' EC00' F000'        	call	___awmod	;wreg free
   887  0034' C000' F006'        	movff	?___awmod,___awdiv@dividend
   888  0038' C001' F007'        	movff	?___awmod+1,___awdiv@dividend+1
   889  003C' 0E00               	movlw	0
   890  003E' 6E09'              	movwf	___awdiv@divisor+1,c
   891  0040' 0E0A               	movlw	10
   892  0042' 6E08'              	movwf	___awdiv@divisor,c
   893  0044' EC00' F000'        	call	___awdiv	;wreg free
   894  0048' 3A06'              	swapf	?___awdiv,f,c
   895  004A' 3A07'              	swapf	?___awdiv+1,f,c
   896  004C' 0EF0               	movlw	240
   897  004E' 1607'              	andwf	?___awdiv+1,f,c
   898  0050' 5006'              	movf	?___awdiv,w,c
   899  0052' 0B0F               	andlw	15
   900  0054' 1207'              	iorwf	?___awdiv+1,f,c
   901  0056' 0EF0               	movlw	240
   902  0058' 1606'              	andwf	?___awdiv,f,c
   903  005A' 5013'              	movf	hex2bcd@y,w,c
   904  005C' 1006'              	iorwf	?___awdiv,w,c
   905  005E' 6E13'              	movwf	hex2bcd@y,c
   906  0060' 5014'              	movf	hex2bcd@y+1,w,c
   907  0062' 1007'              	iorwf	?___awdiv+1,w,c
   908  0064' 6E14'              	movwf	hex2bcd@y+1,c
   909                           
   910                           ;comm.c: 31: y = ((x % 100) % 10) | y;
   911  0066' 0E00               	movlw	0
   912  0068' 6E03'              	movwf	___awmod@divisor+1,c
   913  006A' 0E64               	movlw	100
   914  006C' 6E02'              	movwf	___awmod@divisor,c
   915  006E' C012' F000'        	movff	hex2bcd@x,___awmod@dividend
   916  0072' 6A01'              	clrf	___awmod@dividend+1,c
   917  0074' EC00' F000'        	call	___awmod	;wreg free
   918  0078' C000' F010'        	movff	?___awmod,_hex2bcd$916
   919  007C' C001' F011'        	movff	?___awmod+1,_hex2bcd$916+1
   920                           
   921                           ;comm.c: 31: y = ((x % 100) % 10) | y;
   922  0080' C010' F000'        	movff	_hex2bcd$916,___awmod@dividend
   923  0084' C011' F001'        	movff	_hex2bcd$916+1,___awmod@dividend+1
   924  0088' 0E00               	movlw	0
   925  008A' 6E03'              	movwf	___awmod@divisor+1,c
   926  008C' 0E0A               	movlw	10
   927  008E' 6E02'              	movwf	___awmod@divisor,c
   928  0090' EC00' F000'        	call	___awmod	;wreg free
   929  0094' 5013'              	movf	hex2bcd@y,w,c
   930  0096' 1000'              	iorwf	?___awmod,w,c
   931  0098' 6E13'              	movwf	hex2bcd@y,c
   932  009A' 5014'              	movf	hex2bcd@y+1,w,c
   933  009C' 1001'              	iorwf	?___awmod+1,w,c
   934  009E' 6E14'              	movwf	hex2bcd@y+1,c
   935                           
   936                           ;comm.c: 33: return (y);
   937  00A0' C013' F00E'        	movff	hex2bcd@y,?_hex2bcd
   938  00A4' C014' F00F'        	movff	hex2bcd@y+1,?_hex2bcd+1
   939  00A8' 0012               	return	
   940  00AA'                    __end_of_hex2bcd:
   941                           	opt stack 0
   942                           tosu	equ	0xFFF
   943                           tosh	equ	0xFFE
   944                           tosl	equ	0xFFD
   945                           pclath	equ	0xFFA
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           prodh	equ	0xFF4
   951                           prodl	equ	0xFF3
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           indf2	equ	0xFDF
   955                           fsr2h	equ	0xFDA
   956                           fsr2l	equ	0xFD9
   957                           status	equ	0xFD8
   958                           
   959 ;; *************** function ___awmod *****************
   960 ;; Defined at:
   961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  dividend        2    0[COMRAM] int 
   964 ;;  divisor         2    2[COMRAM] int 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  sign            1    5[COMRAM] unsigned char 
   967 ;;  counter         1    4[COMRAM] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  2    0[COMRAM] int 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   977 ;;      Params:         4       0       0       0       0       0       0       0       0
   978 ;;      Locals:         2       0       0       0       0       0       0       0       0
   979 ;;      Temps:          0       0       0       0       0       0       0       0       0
   980 ;;      Totals:         6       0       0       0       0       0       0       0       0
   981 ;;Total ram usage:        6 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; This function calls:
   984 ;;		Nothing
   985 ;; This function is called by:
   986 ;;		_hex2bcd
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text4
   991  0000'                    __ptext4:
   992                           	opt stack 0
   993  0000'                    ___awmod:
   994                           	opt stack 28
   995                           
   996                           ;incstack = 0
   997  0000' 0E00               	movlw	0
   998  0002' 6E05'              	movwf	___awmod@sign,c
   999  0004' AE01'              	btfss	___awmod@dividend+1,7,c
  1000  0006' D006               	goto	l1040
  1001  0008' 6C00'              	negf	___awmod@dividend,c
  1002  000A' 1E01'              	comf	___awmod@dividend+1,f,c
  1003  000C' B0D8               	btfsc	status,0,c
  1004  000E' 2A01'              	incf	___awmod@dividend+1,f,c
  1005  0010' 0E01               	movlw	1
  1006  0012' 6E05'              	movwf	___awmod@sign,c
  1007  0014'                    l1040:
  1008  0014' AE03'              	btfss	___awmod@divisor+1,7,c
  1009  0016' D004               	goto	l1044
  1010  0018' 6C02'              	negf	___awmod@divisor,c
  1011  001A' 1E03'              	comf	___awmod@divisor+1,f,c
  1012  001C' B0D8               	btfsc	status,0,c
  1013  001E' 2A03'              	incf	___awmod@divisor+1,f,c
  1014  0020'                    l1044:
  1015  0020' 5002'              	movf	___awmod@divisor,w,c
  1016  0022' 1003'              	iorwf	___awmod@divisor+1,w,c
  1017  0024' B4D8               	btfsc	status,2,c
  1018  0026' D018               	goto	l1060
  1019  0028' 0E01               	movlw	1
  1020  002A' 6E04'              	movwf	___awmod@counter,c
  1021  002C' D004               	goto	l1050
  1022  002E'                    l1048:
  1023  002E' 90D8               	bcf	status,0,c
  1024  0030' 3602'              	rlcf	___awmod@divisor,f,c
  1025  0032' 3603'              	rlcf	___awmod@divisor+1,f,c
  1026  0034' 2A04'              	incf	___awmod@counter,f,c
  1027  0036'                    l1050:
  1028  0036' AE03'              	btfss	___awmod@divisor+1,7,c
  1029  0038' D7FA               	goto	l1048
  1030  003A'                    l1052:
  1031  003A' 5002'              	movf	___awmod@divisor,w,c
  1032  003C' 5C00'              	subwf	___awmod@dividend,w,c
  1033  003E' 5003'              	movf	___awmod@divisor+1,w,c
  1034  0040' 5801'              	subwfb	___awmod@dividend+1,w,c
  1035  0042' A0D8               	btfss	status,0,c
  1036  0044' D004               	goto	l1056
  1037  0046' 5002'              	movf	___awmod@divisor,w,c
  1038  0048' 5E00'              	subwf	___awmod@dividend,f,c
  1039  004A' 5003'              	movf	___awmod@divisor+1,w,c
  1040  004C' 5A01'              	subwfb	___awmod@dividend+1,f,c
  1041  004E'                    l1056:
  1042  004E' 90D8               	bcf	status,0,c
  1043  0050' 3203'              	rrcf	___awmod@divisor+1,f,c
  1044  0052' 3202'              	rrcf	___awmod@divisor,f,c
  1045  0054' 2E04'              	decfsz	___awmod@counter,f,c
  1046  0056' D7F1               	goto	l1052
  1047  0058'                    l1060:
  1048  0058' 5005'              	movf	___awmod@sign,w,c
  1049  005A' B4D8               	btfsc	status,2,c
  1050  005C' D004               	goto	l1064
  1051  005E' 6C00'              	negf	___awmod@dividend,c
  1052  0060' 1E01'              	comf	___awmod@dividend+1,f,c
  1053  0062' B0D8               	btfsc	status,0,c
  1054  0064' 2A01'              	incf	___awmod@dividend+1,f,c
  1055  0066'                    l1064:
  1056  0066' C000' F000'        	movff	___awmod@dividend,?___awmod
  1057  006A' C001' F001'        	movff	___awmod@dividend+1,?___awmod+1
  1058  006E' 0012               	return	
  1059  0070'                    __end_of___awmod:
  1060                           	opt stack 0
  1061                           tosu	equ	0xFFF
  1062                           tosh	equ	0xFFE
  1063                           tosl	equ	0xFFD
  1064                           pclath	equ	0xFFA
  1065                           tblptru	equ	0xFF8
  1066                           tblptrh	equ	0xFF7
  1067                           tblptrl	equ	0xFF6
  1068                           tablat	equ	0xFF5
  1069                           prodh	equ	0xFF4
  1070                           prodl	equ	0xFF3
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           indf2	equ	0xFDF
  1074                           fsr2h	equ	0xFDA
  1075                           fsr2l	equ	0xFD9
  1076                           status	equ	0xFD8
  1077                           
  1078 ;; *************** function ___awdiv *****************
  1079 ;; Defined at:
  1080 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  dividend        2    6[COMRAM] int 
  1083 ;;  divisor         2    8[COMRAM] int 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  quotient        2   12[COMRAM] int 
  1086 ;;  sign            1   11[COMRAM] unsigned char 
  1087 ;;  counter         1   10[COMRAM] unsigned char 
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  2    6[COMRAM] int 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1097 ;;      Params:         4       0       0       0       0       0       0       0       0
  1098 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1100 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1101 ;;Total ram usage:        8 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_hex2bcd
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text5
  1111  0000'                    __ptext5:
  1112                           	opt stack 0
  1113  0000'                    ___awdiv:
  1114                           	opt stack 28
  1115                           
  1116                           ;incstack = 0
  1117  0000' 0E00               	movlw	0
  1118  0002' 6E0B'              	movwf	___awdiv@sign,c
  1119  0004' AE09'              	btfss	___awdiv@divisor+1,7,c
  1120  0006' D006               	goto	l996
  1121  0008' 6C08'              	negf	___awdiv@divisor,c
  1122  000A' 1E09'              	comf	___awdiv@divisor+1,f,c
  1123  000C' B0D8               	btfsc	status,0,c
  1124  000E' 2A09'              	incf	___awdiv@divisor+1,f,c
  1125  0010' 0E01               	movlw	1
  1126  0012' 6E0B'              	movwf	___awdiv@sign,c
  1127  0014'                    l996:
  1128  0014' AE07'              	btfss	___awdiv@dividend+1,7,c
  1129  0016' D006               	goto	l1002
  1130  0018' 6C06'              	negf	___awdiv@dividend,c
  1131  001A' 1E07'              	comf	___awdiv@dividend+1,f,c
  1132  001C' B0D8               	btfsc	status,0,c
  1133  001E' 2A07'              	incf	___awdiv@dividend+1,f,c
  1134  0020' 0E01               	movlw	1
  1135  0022' 1A0B'              	xorwf	___awdiv@sign,f,c
  1136  0024'                    l1002:
  1137  0024' 0E00               	movlw	0
  1138  0026' 6E0D'              	movwf	___awdiv@quotient+1,c
  1139  0028' 0E00               	movlw	0
  1140  002A' 6E0C'              	movwf	___awdiv@quotient,c
  1141  002C' 5008'              	movf	___awdiv@divisor,w,c
  1142  002E' 1009'              	iorwf	___awdiv@divisor+1,w,c
  1143  0030' B4D8               	btfsc	status,2,c
  1144  0032' D01C               	goto	l1024
  1145  0034' 0E01               	movlw	1
  1146  0036' 6E0A'              	movwf	___awdiv@counter,c
  1147  0038' D004               	goto	l1010
  1148  003A'                    l1008:
  1149  003A' 90D8               	bcf	status,0,c
  1150  003C' 3608'              	rlcf	___awdiv@divisor,f,c
  1151  003E' 3609'              	rlcf	___awdiv@divisor+1,f,c
  1152  0040' 2A0A'              	incf	___awdiv@counter,f,c
  1153  0042'                    l1010:
  1154  0042' AE09'              	btfss	___awdiv@divisor+1,7,c
  1155  0044' D7FA               	goto	l1008
  1156  0046'                    l1012:
  1157  0046' 90D8               	bcf	status,0,c
  1158  0048' 360C'              	rlcf	___awdiv@quotient,f,c
  1159  004A' 360D'              	rlcf	___awdiv@quotient+1,f,c
  1160  004C' 5008'              	movf	___awdiv@divisor,w,c
  1161  004E' 5C06'              	subwf	___awdiv@dividend,w,c
  1162  0050' 5009'              	movf	___awdiv@divisor+1,w,c
  1163  0052' 5807'              	subwfb	___awdiv@dividend+1,w,c
  1164  0054' A0D8               	btfss	status,0,c
  1165  0056' D005               	goto	l1020
  1166  0058' 5008'              	movf	___awdiv@divisor,w,c
  1167  005A' 5E06'              	subwf	___awdiv@dividend,f,c
  1168  005C' 5009'              	movf	___awdiv@divisor+1,w,c
  1169  005E' 5A07'              	subwfb	___awdiv@dividend+1,f,c
  1170  0060' 800C'              	bsf	___awdiv@quotient,0,c
  1171  0062'                    l1020:
  1172  0062' 90D8               	bcf	status,0,c
  1173  0064' 3209'              	rrcf	___awdiv@divisor+1,f,c
  1174  0066' 3208'              	rrcf	___awdiv@divisor,f,c
  1175  0068' 2E0A'              	decfsz	___awdiv@counter,f,c
  1176  006A' D7ED               	goto	l1012
  1177  006C'                    l1024:
  1178  006C' 500B'              	movf	___awdiv@sign,w,c
  1179  006E' B4D8               	btfsc	status,2,c
  1180  0070' D004               	goto	l1028
  1181  0072' 6C0C'              	negf	___awdiv@quotient,c
  1182  0074' 1E0D'              	comf	___awdiv@quotient+1,f,c
  1183  0076' B0D8               	btfsc	status,0,c
  1184  0078' 2A0D'              	incf	___awdiv@quotient+1,f,c
  1185  007A'                    l1028:
  1186  007A' C00C' F006'        	movff	___awdiv@quotient,?___awdiv
  1187  007E' C00D' F007'        	movff	___awdiv@quotient+1,?___awdiv+1
  1188  0082' 0012               	return	
  1189  0084'                    __end_of___awdiv:
  1190                           	opt stack 0
  1191                           tosu	equ	0xFFF
  1192                           tosh	equ	0xFFE
  1193                           tosl	equ	0xFFD
  1194                           pclath	equ	0xFFA
  1195                           tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           prodh	equ	0xFF4
  1200                           prodl	equ	0xFF3
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           indf2	equ	0xFDF
  1204                           fsr2h	equ	0xFDA
  1205                           fsr2l	equ	0xFD9
  1206                           status	equ	0xFD8
  1207                           
  1208 ;; *************** function _scanf_UART *****************
  1209 ;; Defined at:
  1210 ;;		line 26 in file "UART.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;		None
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      unsigned char 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1224 ;;      Params:         0       0       0       0       0       0       0       0       0
  1225 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1227 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1228 ;;Total ram usage:        0 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; This function calls:
  1231 ;;		Nothing
  1232 ;; This function is called by:
  1233 ;;		_vfnState0
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           	psect	text6
  1238  0000'                    __ptext6:
  1239                           	opt stack 0
  1240  0000'                    _scanf_UART:
  1241                           	opt stack 29
  1242  0000'                    l32:
  1243  0000' AA9E               	btfss	3998,5,c	;volatile
  1244  0002' D7FE               	goto	l32
  1245                           
  1246                           ;UART.c: 28: PIR1bits.RCIF=0;
  1247  0004' 9A9E               	bcf	3998,5,c	;volatile
  1248                           
  1249                           ;UART.c: 29: return RCREG;
  1250  0006' 50AE               	movf	4014,w,c	;volatile
  1251  0008' 0012               	return	
  1252  000A'                    __end_of_scanf_UART:
  1253                           	opt stack 0
  1254                           tosu	equ	0xFFF
  1255                           tosh	equ	0xFFE
  1256                           tosl	equ	0xFFD
  1257                           pclath	equ	0xFFA
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           prodh	equ	0xFF4
  1263                           prodl	equ	0xFF3
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           indf2	equ	0xFDF
  1267                           fsr2h	equ	0xFDA
  1268                           fsr2l	equ	0xFD9
  1269                           status	equ	0xFD8
  1270                           
  1271 ;; *************** function _printf_UART *****************
  1272 ;; Defined at:
  1273 ;;		line 32 in file "UART.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;  dato            2    1[COMRAM] PTR unsigned char 
  1276 ;;		 -> STR_5(3), STR_4(3), STR_3(3), STR_2(3), 
  1277 ;;		 -> STR_1(15), 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  i               1    5[COMRAM] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1289 ;;      Params:         2       0       0       0       0       0       0       0       0
  1290 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1291 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1292 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1293 ;;Total ram usage:        5 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    1
  1296 ;; This function calls:
  1297 ;;		_putc_UART
  1298 ;; This function is called by:
  1299 ;;		_vfnState0
  1300 ;;		_vfnState1
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text7
  1305  0000'                    __ptext7:
  1306                           	opt stack 0
  1307  0000'                    _printf_UART:
  1308                           	opt stack 28
  1309                           
  1310                           ;UART.c: 33: unsigned char i=0;
  1311                           
  1312                           ;incstack = 0
  1313  0000' 0E00               	movlw	0
  1314  0002' D013               	goto	L1
  1315  0004'                    l1070:
  1316                           
  1317                           ;UART.c: 35: putc_UART(dato[i]);
  1318  0004' 5005'              	movf	printf_UART@i,w,c
  1319  0006' 0D01               	mullw	1
  1320  0008' C001' F003'        	movff	printf_UART@dato,??_printf_UART
  1321  000C' C002' F004'        	movff	printf_UART@dato+1,??_printf_UART+1
  1322  0010' 50F3               	movf	prodl,w,c
  1323  0012' 2603'              	addwf	??_printf_UART,f,c
  1324  0014' 50F4               	movf	prodh,w,c
  1325  0016' 2204'              	addwfc	??_printf_UART+1,f,c
  1326  0018' C003' FFF6         	movff	??_printf_UART,tblptrl
  1327  001C' C004' FFF7         	movff	??_printf_UART+1,tblptrh
  1328  0020'                    	if	0	;tblptru may be non-zero
  1329  0020'                    	endif
  1330  0020'                    	if	0	;tblptru may be non-zero
  1331  0020'                    	endif
  1332  0020' 0008               	tblrd		*
  1333  0022' 50F5               	movf	tablat,w,c
  1334  0024' EC00' F000'        	call	_putc_UART
  1335                           
  1336                           ;UART.c: 36: i=i+1;
  1337  0028' 2805'              	incf	printf_UART@i,w,c
  1338  002A'                    L1:
  1339  002A' 6E05'              	movwf	printf_UART@i,c
  1340  002C' 5005'              	movf	printf_UART@i,w,c
  1341  002E' 0D01               	mullw	1
  1342  0030' C001' F003'        	movff	printf_UART@dato,??_printf_UART
  1343  0034' C002' F004'        	movff	printf_UART@dato+1,??_printf_UART+1
  1344  0038' 50F3               	movf	prodl,w,c
  1345  003A' 2603'              	addwf	??_printf_UART,f,c
  1346  003C' 50F4               	movf	prodh,w,c
  1347  003E' 2204'              	addwfc	??_printf_UART+1,f,c
  1348  0040' C003' FFF6         	movff	??_printf_UART,tblptrl
  1349  0044' C004' FFF7         	movff	??_printf_UART+1,tblptrh
  1350  0048'                    	if	0	;tblptru may be non-zero
  1351  0048'                    	endif
  1352  0048'                    	if	0	;tblptru may be non-zero
  1353  0048'                    	endif
  1354  0048' 0008               	tblrd		*
  1355  004A' 50F5               	movf	tablat,w,c
  1356  004C' 0900               	iorlw	0
  1357  004E' B4D8               	btfsc	status,2,c
  1358  0050' 0012               	return	
  1359  0052' D7D8               	goto	l1070
  1360  0054'                    __end_of_printf_UART:
  1361                           	opt stack 0
  1362                           tosu	equ	0xFFF
  1363                           tosh	equ	0xFFE
  1364                           tosl	equ	0xFFD
  1365                           pclath	equ	0xFFA
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           prodh	equ	0xFF4
  1371                           prodl	equ	0xFF3
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           indf2	equ	0xFDF
  1375                           fsr2h	equ	0xFDA
  1376                           fsr2l	equ	0xFD9
  1377                           status	equ	0xFD8
  1378                           
  1379 ;; *************** function _putc_UART *****************
  1380 ;; Defined at:
  1381 ;;		line 21 in file "UART.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  dato_TX         1    wreg     unsigned char 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  dato_TX         1    0[COMRAM] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1395 ;;      Params:         0       0       0       0       0       0       0       0       0
  1396 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1398 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1399 ;;Total ram usage:        1 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; This function calls:
  1402 ;;		Nothing
  1403 ;; This function is called by:
  1404 ;;		_printf_UART
  1405 ;;		_vfnState0
  1406 ;;		_vfnState1
  1407 ;;		_BCD_UART
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text8
  1412  0000'                    __ptext8:
  1413                           	opt stack 0
  1414  0000'                    _putc_UART:
  1415                           	opt stack 29
  1416                           
  1417                           ;incstack = 0
  1418                           ;putc_UART@dato_TX stored from wreg
  1419  0000' 6E00'              	movwf	putc_UART@dato_TX,c
  1420  0002'                    l26:
  1421  0002' A2AC               	btfss	4012,1,c	;volatile
  1422  0004' D7FE               	goto	l26
  1423                           
  1424                           ;UART.c: 23: TXREG=dato_TX;
  1425  0006' C000' FFAD         	movff	putc_UART@dato_TX,4013	;volatile
  1426  000A' 0012               	return		;funcret
  1427  000C'                    __end_of_putc_UART:
  1428                           	opt stack 0
  1429                           tosu	equ	0xFFF
  1430                           tosh	equ	0xFFE
  1431                           tosl	equ	0xFFD
  1432                           pclath	equ	0xFFA
  1433                           tblptru	equ	0xFF8
  1434                           tblptrh	equ	0xFF7
  1435                           tblptrl	equ	0xFF6
  1436                           tablat	equ	0xFF5
  1437                           prodh	equ	0xFF4
  1438                           prodl	equ	0xFF3
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           indf2	equ	0xFDF
  1442                           fsr2h	equ	0xFDA
  1443                           fsr2l	equ	0xFD9
  1444                           status	equ	0xFD8
  1445                           
  1446 ;; *************** function _bcd2hex *****************
  1447 ;; Defined at:
  1448 ;;		line 36 in file "comm.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  y               1    wreg     unsigned char 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  y               1    1[COMRAM] unsigned char 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      unsigned char 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2, status,0, prodl, prodh
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1462 ;;      Params:         0       0       0       0       0       0       0       0       0
  1463 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1464 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1465 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1466 ;;Total ram usage:        2 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_vfnState0
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text9
  1476  0000'                    __ptext9:
  1477                           	opt stack 0
  1478  0000'                    _bcd2hex:
  1479                           	opt stack 29
  1480                           
  1481                           ;incstack = 0
  1482                           ;bcd2hex@y stored from wreg
  1483  0000' 6E01'              	movwf	bcd2hex@y,c
  1484                           
  1485                           ;comm.c: 37: return ((y>>4)*10)+ (y & 0x0F);
  1486  0002' C001' F000'        	movff	bcd2hex@y,??_bcd2hex
  1487  0006' 0E0F               	movlw	15
  1488  0008' 1600'              	andwf	??_bcd2hex,f,c
  1489  000A' 3801'              	swapf	bcd2hex@y,w,c
  1490  000C' 0B0F               	andlw	15
  1491  000E' 0D0A               	mullw	10
  1492  0010' 50F3               	movf	prodl,w,c
  1493  0012' 2400'              	addwf	??_bcd2hex,w,c
  1494  0014' 0012               	return	
  1495  0016'                    __end_of_bcd2hex:
  1496                           	opt stack 0
  1497                           tosu	equ	0xFFF
  1498                           tosh	equ	0xFFE
  1499                           tosl	equ	0xFFD
  1500                           pclath	equ	0xFFA
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           prodh	equ	0xFF4
  1506                           prodl	equ	0xFF3
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           indf2	equ	0xFDF
  1510                           fsr2h	equ	0xFDA
  1511                           fsr2l	equ	0xFD9
  1512                           status	equ	0xFD8
  1513                           
  1514 ;; *************** function _config *****************
  1515 ;; Defined at:
  1516 ;;		line 11 in file "UART.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1530 ;;      Params:         0       0       0       0       0       0       0       0       0
  1531 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1533 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1534 ;;Total ram usage:        0 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text10
  1544  0000'                    __ptext10:
  1545                           	opt stack 0
  1546  0000'                    _config:
  1547                           	opt stack 30
  1548                           
  1549                           ;UART.c: 12: TXSTA=0x26;
  1550                           
  1551                           ;incstack = 0
  1552  0000' 0E26               	movlw	38
  1553  0002' 6EAC               	movwf	4012,c	;volatile
  1554                           
  1555                           ;UART.c: 13: RCSTA=0x90;
  1556  0004' 0E90               	movlw	144
  1557  0006' 6EAB               	movwf	4011,c	;volatile
  1558                           
  1559                           ;UART.c: 14: SPBRGH=0;
  1560  0008' 0E00               	movlw	0
  1561  000A' 6EB0               	movwf	4016,c	;volatile
  1562                           
  1563                           ;UART.c: 15: SPBRG=103;
  1564  000C' 0E67               	movlw	103
  1565  000E' 6EAF               	movwf	4015,c	;volatile
  1566                           
  1567                           ;UART.c: 16: BAUDCON=0x48;
  1568  0010' 0E48               	movlw	72
  1569  0012' 6EB8               	movwf	4024,c	;volatile
  1570                           
  1571                           ;UART.c: 17: TRISCbits.RC6=1;
  1572  0014' 8C94               	bsf	3988,6,c	;volatile
  1573                           
  1574                           ;UART.c: 18: TRISCbits.RC7 =1;
  1575  0016' 8E94               	bsf	3988,7,c	;volatile
  1576  0018' 0012               	return		;funcret
  1577  001A'                    __end_of_config:
  1578                           	opt stack 0
  1579                           tosu	equ	0xFFF
  1580                           tosh	equ	0xFFE
  1581                           tosl	equ	0xFFD
  1582                           pclath	equ	0xFFA
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           prodh	equ	0xFF4
  1588                           prodl	equ	0xFF3
  1589                           postinc0	equ	0xFEE
  1590                           wreg	equ	0xFE8
  1591                           indf2	equ	0xFDF
  1592                           fsr2h	equ	0xFDA
  1593                           fsr2l	equ	0xFD9
  1594                           status	equ	0xFD8
  1595                           tosu	equ	0xFFF
  1596                           tosh	equ	0xFFE
  1597                           tosl	equ	0xFFD
  1598                           pclath	equ	0xFFA
  1599                           tblptru	equ	0xFF8
  1600                           tblptrh	equ	0xFF7
  1601                           tblptrl	equ	0xFF6
  1602                           tablat	equ	0xFF5
  1603                           prodh	equ	0xFF4
  1604                           prodl	equ	0xFF3
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           indf2	equ	0xFDF
  1608                           fsr2h	equ	0xFDA
  1609                           fsr2l	equ	0xFD9
  1610                           status	equ	0xFD8
  1611                           
  1612                           	psect	text11
  1613  0000'                    __ptext11:
  1614                           	opt stack 0
  1615                           tosu	equ	0xFFF
  1616                           tosh	equ	0xFFE
  1617                           tosl	equ	0xFFD
  1618                           pclath	equ	0xFFA
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           prodh	equ	0xFF4
  1624                           prodl	equ	0xFF3
  1625                           postinc0	equ	0xFEE
  1626                           wreg	equ	0xFE8
  1627                           indf2	equ	0xFDF
  1628                           fsr2h	equ	0xFDA
  1629                           fsr2l	equ	0xFD9
  1630                           status	equ	0xFD8
  1631                           
  1632                           	psect	rparam
  1633  0000                     tosu	equ	0xFFF
  1634                           tosh	equ	0xFFE
  1635                           tosl	equ	0xFFD
  1636                           pclath	equ	0xFFA
  1637                           tblptru	equ	0xFF8
  1638                           tblptrh	equ	0xFF7
  1639                           tblptrl	equ	0xFF6
  1640                           tablat	equ	0xFF5
  1641                           prodh	equ	0xFF4
  1642                           prodl	equ	0xFF3
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           indf2	equ	0xFDF
  1646                           fsr2h	equ	0xFDA
  1647                           fsr2l	equ	0xFD9
  1648                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    4
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      35
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    vfnapStateMachineFuncPtr	const PTR FTN()void [2] size(2) Largest target is 1
		 -> vfnState1(), vfnState0(), 

    printf_UART@dato	PTR unsigned char  size(2) Largest target is 15
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), 
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_vfnState1
    _vfnState1->_hex2bcd
    _hex2bcd->___awdiv
    ___awdiv->___awmod
    _vfnState0->_printf_UART
    _printf_UART->_putc_UART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2972
                             _config
                          _vfnState0 *
                          _vfnState1 *
 ---------------------------------------------------------------------------------
 (1) _vfnState1                                            2     2      0    2308
                                             21 COMRAM     2     2      0
                         _ASCII_UART
                            _hex2bcd
                        _printf_UART
                          _putc_UART
 ---------------------------------------------------------------------------------
 (2) _hex2bcd                                              7     5      2    1514
                                             14 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     604
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _ASCII_UART                                           2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _vfnState0                                            1     1      0     664
                                              6 COMRAM     1     1      0
                            _bcd2hex
                        _printf_UART
                          _putc_UART
                         _scanf_UART
 ---------------------------------------------------------------------------------
 (2) _scanf_UART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf_UART                                          5     3      2     507
                                              1 COMRAM     5     3      2
                          _putc_UART
 ---------------------------------------------------------------------------------
 (2) _putc_UART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _bcd2hex                                              2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config
   _vfnState0 *
     _bcd2hex
     _printf_UART
       _putc_UART
     _putc_UART
     _scanf_UART
   _vfnState1 *
     _ASCII_UART
     _hex2bcd
       ___awdiv
         ___awmod (ARG)
       ___awmod
     _printf_UART
       _putc_UART
     _putc_UART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      23       1       36.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      23      20        0.0%
DATA                 0      0      23       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Mar 06 18:11:25 2018

                              l32 000000                                l26 000002  
                    ___awdiv@sign 00000B                       __CFG_BOR$ON 000000  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l131 000138  
                             l124 00003A                               l127 00009A  
                             l129 0000E6                               l996 000014  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                             u558 00001C                               _num 000000  
                    ___awmod@sign 000005                               prod 000FF3  
                             tosl 000FFD                               wreg 000FE8  
                    __CFG_LVP$OFF 000000                      __CFG_WDT$OFF 000000  
                            l1010 000042                              l1002 000024  
                            l1020 000062                              l1012 000046  
                            l1100 00005E                              l1008 00003A  
                            l1024 00006C                              l1040 000014  
                            l1050 000036                              l1130 000050  
                            l1028 00007A                              l1052 00003A  
                            l1060 000058                              l1044 000020  
                            l1070 000004                              l1064 000066  
                            l1056 00004E                              l1048 00002E  
                            l1152 0000B2                              l1090 000018  
                            l1086 000010                              l1168 0000FC  
                            l1096 00005A                              l1192 000008  
                            l1186 00014E                      printf_UART@i 000005  
                            STR_1 000005                              STR_2 00000C  
                            STR_3 00000C                              STR_4 00000C  
                            STR_5 00000C                              _TMR0 000FD6  
                    __CFG_WRTB$ON 000000                              _dig1 00000A  
                            _dig2 000009                              _main 000000  
                            indf2 000FDF                              fsr2l 000FD9  
                            prodh 000FF4                              prodl 000FF3  
                            start 000000*                    __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                   __CFG_PLLDIV$5 000000                    __CFG_CCP2MX$ON 000000  
                 __end_of_bcd2hex 000016                             ?_main 000000  
                 __end_of___awdiv 000084                   __end_of___awmod 000070  
                           _T0CON 000FD5                   ___awdiv@divisor 000008  
                 ___awdiv@counter 00000A                             _RCREG 000FAE  
                           _RCSTA 000FAB                             _SPBRG 000FAF  
                   __CFG_USBDIV$2 000000                             _TXREG 000FAD  
                           _TXSTA 000FAC                     __CFG_PWRT$OFF 000000  
                 __end_of_hex2bcd 0000AA                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                           _dato1 000008                             _dato2 000007  
                  __CFG_EBTRB$OFF 000000                             _byte1 000006  
                           pclath 000FFA                             tablat 000FF5  
                           status 000FD8                    __CFG_ICPRT$OFF 000000  
                 __initialization 000000                      __end_of_main 000034  
                          ??_main 000017                     __activetblptr 000002  
                ___awdiv@dividend 000006                            _SPBRGH 000FB0  
                  __CFG_VREGEN$ON 000000                    __CFG_XINST$OFF 000000  
                       ??_bcd2hex 000000                         ??___awdiv 00000A  
                  __CFG_STVREN$ON 000000                         ??___awmod 000004  
                          _config 000000                      ??_ASCII_UART 000000  
                          clear_0 000006                  ___awdiv@quotient 00000C  
                       ??_hex2bcd 000010                   ___awmod@divisor 000002  
                          _result 00000B                   ___awmod@counter 000004  
                    __mediumconst 000000*                           tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_printf_UART 000001                        __accesstop 000000* 
         __end_of__initialization 00000C                   __CFG_PBADEN$OFF 000000  
                   ___rparam_used 000001                    __pcstackCOMRAM 000000  
                 printf_UART@dato 000001                           ?_config 000000  
                         _BAUDCON 000FB8                  putc_UART@dato_TX 000000  
              __size_of_vfnState0 000000                __size_of_vfnState1 000000  
              __size_of_putc_UART 000000                           __Hparam 000000  
                         __Lparam 000000                           _bcd2hex 000000  
                         ___awdiv 000000                           ___awmod 000000  
                    __psmallconst 000000                           _gbState 000005  
                 __size_of_config 000000                           __pcinit 000000  
                         _hex2bcd 000000                           __ramtop 000000* 
                         __ptext0 000000                           __ptext1 000000  
                         __ptext2 000000                           __ptext3 000000  
                         __ptext4 000000                           __ptext5 000000  
                         __ptext6 000000                           __ptext7 000000  
                         __ptext8 000000                           __ptext9 000000  
                      _scanf_UART 000000                  ___awmod@dividend 000000  
            end_of_initialization 00000C              __size_of_printf_UART 000000  
                   __Lmediumconst 000000*                __end_of_vfnState0 00009C  
               __end_of_vfnState1 000154                 __end_of_putc_UART 00000C  
        _vfnapStateMachineFuncPtr 000001                           postinc0 000FEE  
                      _result_bcd 000003                         _TRISCbits 000F94  
                       _TXSTAbits 000FAC                    __end_of_config 00001A  
                     ?_scanf_UART 000000               start_initialization 000000  
                        ??_config 000000                  __CFG_LPT1OSC$OFF 000000  
                     __pbssCOMRAM 000000                       _hex2bcd$916 000010  
                vfnState1@result1 000016                  vfnState1@result2 000015  
             __size_of_scanf_UART 000000                          ?_bcd2hex 000000  
                        ?___awdiv 000006                          ?___awmod 000000  
                        ?_hex2bcd 00000E                       __smallconst 000000* 
                      vfnState0@i 000006                          _PIR1bits 000F9E  
                       _vfnState0 000000                         _vfnState1 000000  
                __CFG_WDTPS$32768 000000                         _putc_UART 000000  
                      _ADCON0bits 000FC2                     ??_printf_UART 000003  
                        __Hrparam 000000*                         __Lrparam 000000* 
                      ?_vfnState0 000000                        ?_vfnState1 000000  
                __size_of_bcd2hex 000000                          bcd2hex@y 000001  
                __size_of___awdiv 000000                  __size_of___awmod 000000  
                      ?_putc_UART 000000                        _ASCII_UART 000000* 
                __size_of_hex2bcd 000000                      ??_scanf_UART 000000  
                        __ptext10 000000                          __ptext11 000000  
                   __size_of_main 000000                          hex2bcd@x 000012  
                        hex2bcd@y 000013               __end_of_printf_UART 000054  
              __end_of_scanf_UART 00000A             __CFG_CPUDIV$OSC1_PLL2 000000  
                      _INTCONbits 000FF2  __end_of_vfnapStateMachineFuncPtr 000005  
                     ??_vfnState0 000006                       ??_vfnState1 000015  
                     ?_ASCII_UART 000000                       ??_putc_UART 000000  
                     _printf_UART 000000                __CFG_FOSC$HSPLL_HS 000000  
